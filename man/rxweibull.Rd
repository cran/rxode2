% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rxrandom.R
\name{rxweibull}
\alias{rxweibull}
\title{Simulate Weibull variable from threefry generator}
\usage{
rxweibull(shape, scale = 1, n = 1L, ncores = 1L)
}
\arguments{
\item{shape, scale}{shape and scale parameters, the latter defaulting to 1.}

\item{n}{number of observations. If \code{length(n) > 1}, the length
    is taken to be the number required.}

\item{ncores}{Number of cores for the simulation

\code{rxnorm} simulates using the threefry sitmo generator.

\code{rxnormV} used to simulate with the vandercorput simulator, but
since it didn't satisfy the normal properties it was changed to simple be
an alias of \code{rxnorm}. It is no longer supported in \code{rxode2({})} blocks}
}
\value{
Weibull random deviates
}
\description{
Care should be taken with this method not to encounter the
birthday problem, described
\url{https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/}.
Since the \code{sitmo} \code{threefry}, this currently generates
one random deviate from the uniform distribution to seed the
engine \code{threefry} and then run the code.
}
\details{
Therefore, a simple call to the random number generated followed by a second
call to random number generated may have identical seeds.  As the number of
random number generator calls are increased the probability that the
birthday problem will increase.

The key to avoid this problem is to either run all simulations in the
\code{rxode2} environment once (therefore one seed or series of seeds
for the whole simulation), pre-generate all random variables
used for the simulation, or seed the rxode2 engine with \code{rxSetSeed()}

Internally each ID is seeded with a unique number so that the
results do not depend on the number of cores used.
}
\examples{
\donttest{

## Use threefry engine

# with rxweibull you have to explicitly state n
rxweibull(shape = 1, scale = 4, n = 10)

# You can parallelize the simulation using openMP
rxweibull(shape = 1, scale = 4, n = 10, ncores = 2)

rxweibull(3)


## This example uses `rxweibull` directly in the model

rx <- rxode2({
  a <- rxweibull(1, 3)
})

et <- et(1, id = 1:2)

s <- rxSolve(rx, et)
}
}
